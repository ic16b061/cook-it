---
apiVersion: v1
kind: Template
message: |-
  The following service(s) have been created in your project:
    ${NAME}, ${DATABASE_SERVICE_NAME}.
  
  Database Connection Settings:

         Username: ${POSTGRESQL_USER}
         Password: ${POSTGRESQL_PASSWORD}
    Database Name: ${POSTGRESQL_DATABASE}
   Connection URL: postgresql://${DATABASE_SERVICE_NAME}:5432/

  For more information about using this template, including OpenShift
  considerations, see https://gitgab.gabriel-hq.at/gkan/cook-it.git.
metadata:
  annotations:
    description: |-
      Laravel application with PostgreSQL database service. For more
        information about the template, see https://gitgab.gabriel-hq.at/gkan/cook-it.git.
    iconClass: icon-laravel
    openshift.io/display-name: Laravel + PostgreSQL
    openshift.io/documentation-url: https://gitgab.gabriel-hq.at/gkan/cook-it.git
    openshift.io/long-description: |-
      This template provides a standalone Laravel with PostgreSQL server
        application with a database created. The database is stored on
        persistent storage.
      The database name, username, and password are chosen via parameters
        when provisioning this service.
    openshift.io/provider-display-name: Gabriel Kanatschnig (ic16b061)
    tags: laravel,php,database,postgresql
  name: laravel-postgresql-persistent
labels:
  template: laravel-postgresql-persistent
objects:
- kind: Secret
  apiVersion: v1
  metadata:
    annotations:
      template.openshift.io/expose-database_name: "{.data['database-name']}"
      template.openshift.io/expose-password: "{.data['database-password']}"
      template.openshift.io/expose-username: "{.data['database-user']}"
    name: "${NAME}"
  stringData:
    database-name: "${POSTGRESQL_DATABASE}"
    database-password: "${POSTGRESQL_PASSWORD}"
    database-user: "${POSTGRESQL_USER}"
- kind: Service
  apiVersion: v1
  metadata:
    name: "${NAME}"
    annotations:
      description: Exposes and load balances the application pods
      service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}",
        "kind": "Service"}]'
  spec:
    ports:
    - name: web
      port: 8080
      targetPort: 8080
    selector:
      name: "${NAME}"
- kind: Route
  apiVersion: v1
  metadata:
    name: "${NAME}"
  spec:
    host: "${APPLICATION_SUBDOMAIN}.apps.gabriel-hq.at"
    to:
      kind: Service
      name: "${NAME}"
    tls:
      termination: edge
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: "${NAME}"
    annotations:
      description: Keeps track of changes in the application image
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: "${NAME}"
    annotations:
      description: Defines how to build the application
  spec:
    source:
      type: Git
      git:
        uri: "${SOURCE_REPOSITORY_URL}"
        ref: "${SOURCE_REPOSITORY_REF}"
      contextDir: "${CONTEXT_DIR}"
    strategy:
      type: Source
      sourceStrategy:
        from:
          kind: ImageStreamTag
          namespace: "${NAMESPACE}"
          name: php:${PHP_VERSION}
        env:
        - name: COMPOSER_MIRROR
          value: "${COMPOSER_MIRROR}"
    output:
      to:
        kind: ImageStreamTag
        name: "${NAME}:latest"
    triggers:
    - type: ImageChange
    - type: ConfigChange
    - type: GitHub
      github:
        secret: "${GITHUB_WEBHOOK_SECRET}"
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "${VOLUME_CAPACITY}"
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${NAME}"
    annotations:
      description: Defines how to deploy the application server
      template.alpha.openshift.io/wait-for-ready: 'true'
  spec:
    strategy:
      type: Rolling
      rollingParams:
        updatePeriodSeconds: 60
        intervalSecondes: 15 
        timeoutSeconds: 180
        pre:
          failurePolicy: Retry
          execNewPod:
            command:
            - "./migrate-database.sh"
            containerName: laravel-postgresql-persistent
        post:
          failurePolicy: Abort
          execNewPod:
            command: 
            - "./vendor/bin/phpunit"
            containerName: laravel-postgresql-persistent
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - laravel-postgresql-persistent
        from:
          kind: ImageStreamTag
          name: "${NAME}:latest"
    - type: ConfigChange
    replicas: 1
    selector:
      name: "${NAME}"
    template:
      metadata:
        name: "${NAME}"
        labels:
          name: "${NAME}"
      spec:
        containers:
        - name: laravel-postgresql-persistent
          image: "${NAME}"
          ports:
          - containerPort: 8080
          readinessProbe:
            timeoutSeconds: 3
            initialDelaySeconds: 20
            httpGet:
              path: "/health"
              port: 8080
          livenessProbe:
            timeoutSeconds: 3
            initialDelaySeconds: 30
            httpGet:
              path: "/health"
              port: 8080
          env:
          - name: DATABASE_SERVICE_NAME
            value: "${DATABASE_SERVICE_NAME}"
          - name: DATABASE_ENGINE 
            value: "${DATABASE_ENGINE}"
          - name: DATABASE_NAME
            valueFrom:
              secretKeyRef:
                name: "${NAME}"
                key: database-name
          - name: DATABASE_USER
            valueFrom:
              secretKeyRef:
                name: "${NAME}"
                key: database-user
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "${NAME}"
                key: database-password
          - name: APP_KEY
            value: "${LARAVEL_APP_KEY}"
          - name: APP_ENV
            value: "${LARAVEL_APP_ENV}"
          - name: APP_DEBUG
            value: "${LARAVEL_APP_DEBUG}"
          - name: OPCACHE_REVALIDATE_FREQ
            value: "${OPCACHE_REVALIDATE_FREQ}"
          resources:
            limits:
              memory: "${MEMORY_LIMIT}"
- kind: Service
  apiVersion: v1
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
    annotations:
      description: Exposes the database server
  spec:
    ports:
    - name: postgresql
      port: 5432
      targetPort: 5432
    selector:
      name: "${DATABASE_SERVICE_NAME}"
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
    annotations:
      description: Defines how to deploy the database
      template.alpha.openshift.io/wait-for-ready: 'true'
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          namespace: "${NAMESPACE}"
          name: postgresql:${POSTGRESQL_VERSION}
    - type: ConfigChange
    replicas: 1
    selector:
      name: "${DATABASE_SERVICE_NAME}"
    template:
      metadata:
        name: "${DATABASE_SERVICE_NAME}"
        labels:
          name: "${DATABASE_SERVICE_NAME}"
      spec:
        containers:
        - name: postgresql
          image: postgresql
          ports:
          - containerPort: 5432
          readinessProbe:
            exec:
              command:
              - "/usr/libexec/check-container"
            initialDelaySeconds: 5
            timeoutSeconds: 1
          livenessProbe:
            exec:
              command:
              - "/usr/libexec/check-container"
              - "--live"
            initialDelaySeconds: 120
            timeoutSeconds: 10
          resources:
            limits:
              memory: "${MEMORY_POSTGRESQL_LIMIT}"
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: "/dev/termination-log"
          env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                name: "${NAME}"
                key: database-user
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "${NAME}"
                key: database-password
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                name: "${NAME}"
                key: database-name
          volumeMounts:
          - name: "${DATABASE_SERVICE_NAME}-data"
            mountPath: "/var/lib/pgsql/data"
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: "${DATABASE_SERVICE_NAME}-data"
          persistentVolumeClaim:
            claimName: "${DATABASE_SERVICE_NAME}"
parameters:
- name: NAME
  displayName: Application Service Name
  description: The name assigned to all of the frontend objects defined in this template.
  required: true
  value: laravel-postgresql-persistent
- name: NAMESPACE
  displayName: Namespace
  description: The OpenShift Namespace where the ImageStream resides.
  required: true
  value: openshift
- name: SOURCE_REPOSITORY_URL
  displayName: Git Repository URL
  description: The URL of the repository with your application source code.
  required: true
  value: https://gitgab.gabriel-hq.at/gkan/cook-it
- name: SOURCE_REPOSITORY_REF
  displayName: Git Reference
  description: Set this to a branch name, tag or other ref of your repository if you
    are not using the default branch.
- name: PHP_VERSION
  displayName: Version of PHP Image
  description: Version of PHP image to be used (7.1 or latest).
  value: '7.1'
- name: POSTGRESQL_VERSION
  displayName: Version of PostgreSQL Image
  description: Version of PostgreSQL image to be used (9.2, 9.4, 9.5, 9.6, 10 or latest).
  value: '10'
  required: true
- name: LARAVEL_APP_ENV
  displayName: Laravel Application Environment
  description: Determines the 'environment' your application is currently.
  required: true
  value: development
- name: LARAVEL_APP_DEBUG
  displayName: Laravel Application Debug Mode
  description: Enable or disable detailed error messages.
  required: true
  value: 'true'
- name: OPCACHE_REVALIDATE_FREQ
  displayName: OPcache Revalidation Frequency
  description: How often to check script timestamps for updates, in seconds. 0 will
    result in OPcache checking for updates on every request.
  value: '0'
- name: COMPOSER_MIRROR
  displayName: Custom Composer Mirror URL
  description: The custom Composer mirror URL
  value: ''
- name: MEMORY_LIMIT
  displayName: Memory Limit
  description: Maximum amount of memory the Laravel container can use.
  required: true
  value: 512Mi
- name: MEMORY_POSTGRESQL_LIMIT
  displayName: Memory Limit (PostgreSQL)
  description: Maximum amount of memory the PostgreSQL container can use.
  required: true
  value: 512Mi
- name: VOLUME_CAPACITY
  displayName: Volume Capacity
  description: Volume space available for data, e.g. 512Mi, 2Gi
  required: true
  value: 1Gi
- name: CONTEXT_DIR
  displayName: Context Directory
  description: Set this to the relative path to your project if it is not in the root
    of your repository.
- name: APPLICATION_SUBDOMAIN
  displayName: Application Hostname
  description: The exposed hostname that will route to the Laravel service, if left
    blank a value will be defaulted.
  value: ''
- name: GITHUB_WEBHOOK_SECRET
  displayName: GitHub Webhook Secret
  description: A secret string used to configure the GitHub webhook.
  generate: expression
  from: "[a-zA-Z0-9]{40}"
- name: DATABASE_SERVICE_NAME
  displayName: Database Service Name
  required: true
  value: postgresql
- name: DATABASE_ENGINE
  displayName: Database Engine
  description: 'Database engine: mysql, postgresql (default), or sqlite.'
  required: true
  value: postgresql
- name: DATABASE_NAME
  displayName: Database Name
  required: true
  value: laravel
- name: DATABASE_USER
  displayName: Database User
  required: true
  value: laravel
- name: DATABASE_PASSWORD
  displayName: Database Password
  generate: expression
  from: "[a-zA-Z0-9]{16}"
- name: LARAVEL_APP_KEY
  displayName: Laravel Encryption Key
  description: Set this to a 32 character random string.
  generate: expression
  from: "[\\w]{32}"
